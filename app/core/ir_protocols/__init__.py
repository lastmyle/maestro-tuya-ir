"""IR Protocol implementations"""

# Import from ir_send (IRsend.cpp translations)
from app.core.ir_protocols.ir_send import (
    sendData,
    sendGeneric,
)

# Import from fujitsu (ir_Fujitsu.cpp translations)
from app.core.ir_protocols.fujitsu import (
    sendFujitsuAC,
)

# Import from gree (ir_Gree.cpp translations)
from app.core.ir_protocols.gree import (
    sendGree,
    IRGreeAC,
    decodeGree,
    kGreeBits,
)

# Import from daikin (ir_Daikin.cpp translations)
from app.core.ir_protocols.daikin import (
    # Send functions for all 10 Daikin variants
    sendDaikin,
    sendDaikin2,
    sendDaikin216,
    sendDaikin160,
    sendDaikin176,
    sendDaikin128,
    sendDaikin152,
    sendDaikin64,
    sendDaikin200,
    sendDaikin312,
    # Decode functions for all 10 Daikin variants
    decodeDaikin,
    decodeDaikin2,
    decodeDaikin216,
    decodeDaikin160,
    decodeDaikin176,
    decodeDaikin128,
    decodeDaikin152,
    decodeDaikin64,
    decodeDaikin200,
    decodeDaikin312,
    # Constants
    kDaikinBits,
    kDaikin2Bits,
    kDaikin216Bits,
    kDaikin160Bits,
    kDaikin176Bits,
    kDaikin128Bits,
    kDaikin152Bits,
    kDaikin64Bits,
    kDaikin200Bits,
    kDaikin312Bits,
)

# Import from mitsubishi (ir_Mitsubishi.cpp and ir_MitsubishiHeavy.cpp translations)
from app.core.ir_protocols.mitsubishi import (
    # Send functions for all Mitsubishi variants
    sendMitsubishiAC,
    sendMitsubishi136,
    sendMitsubishi112,
    sendMitsubishiHeavy88,
    sendMitsubishiHeavy152,
    # Decode functions for all Mitsubishi variants
    decodeMitsubishiAC,
    decodeMitsubishi136,
    decodeMitsubishi112,
    decodeMitsubishiHeavy,
    # Checksum validation functions
    validChecksumMitsubishiAC,
    validChecksumMitsubishi136,
    validChecksumMitsubishiHeavy152,
    validChecksumMitsubishiHeavy88,
    checkZmsSig,
    checkZjsSig,
    # Constants - Mitsubishi AC (144-bit)
    kMitsubishiAcAuto,
    kMitsubishiAcCool,
    kMitsubishiAcDry,
    kMitsubishiAcHeat,
    kMitsubishiAcFan,
    kMitsubishiAcFanAuto,
    kMitsubishiAcFanMax,
    kMitsubishiAcFanRealMax,
    kMitsubishiAcFanSilent,
    kMitsubishiAcMinTemp,
    kMitsubishiAcMaxTemp,
    # Constants - Mitsubishi 136-bit
    kMitsubishi136Cool,
    kMitsubishi136Heat,
    kMitsubishi136Auto,
    kMitsubishi136Dry,
    kMitsubishi136Fan,
    kMitsubishi136MinTemp,
    kMitsubishi136MaxTemp,
    # Constants - Mitsubishi 112-bit
    kMitsubishi112Cool,
    kMitsubishi112Heat,
    kMitsubishi112Auto,
    kMitsubishi112Dry,
    kMitsubishi112MinTemp,
    kMitsubishi112MaxTemp,
    # Constants - Mitsubishi Heavy
    kMitsubishiHeavyAuto,
    kMitsubishiHeavyCool,
    kMitsubishiHeavyDry,
    kMitsubishiHeavyFan,
    kMitsubishiHeavyHeat,
    kMitsubishiHeavyMinTemp,
    kMitsubishiHeavyMaxTemp,
)

# Import from hitachi (ir_Hitachi.cpp translations)
from app.core.ir_protocols.hitachi import (
    # Send functions for all 8 Hitachi variants
    sendHitachiAC,
    sendHitachiAC1,
    sendHitachiAc424,
    sendHitachiAc3,
    sendHitachiAc344,
    sendHitachiAc264,
    sendHitachiAc296,
    # Decode functions for all 8 Hitachi variants
    decodeHitachiAC,
    decodeHitachiAc424,
    decodeHitachiAc3,
    decodeHitachiAc296,
    # Classes for all 8 Hitachi variants
    IRHitachiAc,
    IRHitachiAc1,
    IRHitachiAc424,
    IRHitachiAc3,
    IRHitachiAc344,
    IRHitachiAc264,
    IRHitachiAc296,
    # Constants - HitachiAC (224-bit)
    kHitachiAcBits,
    kHitachiAcAuto,
    kHitachiAcHeat,
    kHitachiAcCool,
    kHitachiAcDry,
    kHitachiAcFan,
    kHitachiAcFanAuto,
    kHitachiAcFanLow,
    kHitachiAcFanMed,
    kHitachiAcFanHigh,
    kHitachiAcMinTemp,
    kHitachiAcMaxTemp,
    # Constants - HitachiAC1 (104-bit)
    kHitachiAc1Bits,
    kHitachiAc1Dry,
    kHitachiAc1Fan,
    kHitachiAc1Cool,
    kHitachiAc1Heat,
    kHitachiAc1Auto,
    kHitachiAc1FanAuto,
    kHitachiAc1FanHigh,
    kHitachiAc1FanMed,
    kHitachiAc1FanLow,
    kHitachiAc1SleepOff,
    kHitachiAc1Sleep1,
    kHitachiAc1Sleep2,
    kHitachiAc1Sleep3,
    kHitachiAc1Sleep4,
    # Constants - HitachiAC424 (424-bit)
    kHitachiAc424Bits,
    kHitachiAc424Fan,
    kHitachiAc424Cool,
    kHitachiAc424Dry,
    kHitachiAc424Heat,
    kHitachiAc424FanMin,
    kHitachiAc424FanLow,
    kHitachiAc424FanMedium,
    kHitachiAc424FanHigh,
    kHitachiAc424FanAuto,
    kHitachiAc424FanMax,
    kHitachiAc424MinTemp,
    kHitachiAc424MaxTemp,
    # Constants - HitachiAC344 (344-bit)
    kHitachiAc344Bits,
    kHitachiAc344Fan,
    kHitachiAc344Cool,
    kHitachiAc344Dry,
    kHitachiAc344Heat,
    kHitachiAc344FanMin,
    kHitachiAc344FanLow,
    kHitachiAc344FanMedium,
    kHitachiAc344FanHigh,
    kHitachiAc344FanAuto,
    kHitachiAc344FanMax,
    kHitachiAc344MinTemp,
    kHitachiAc344MaxTemp,
    kHitachiAc344SwingHAuto,
    kHitachiAc344SwingHRightMax,
    kHitachiAc344SwingHRight,
    kHitachiAc344SwingHMiddle,
    kHitachiAc344SwingHLeft,
    kHitachiAc344SwingHLeftMax,
    # Constants - HitachiAC264 (264-bit)
    kHitachiAc264Bits,
    kHitachiAc264Fan,
    kHitachiAc264Cool,
    kHitachiAc264Dry,
    kHitachiAc264Heat,
    kHitachiAc264FanMin,
    kHitachiAc264FanMedium,
    kHitachiAc264FanHigh,
    kHitachiAc264FanAuto,
    kHitachiAc264MinTemp,
    kHitachiAc264MaxTemp,
    # Constants - HitachiAC296 (296-bit)
    kHitachiAc296Bits,
    kHitachiAc296Cool,
    kHitachiAc296DryCool,
    kHitachiAc296Dehumidify,
    kHitachiAc296Heat,
    kHitachiAc296Auto,
    kHitachiAc296FanSilent,
    kHitachiAc296FanLow,
    kHitachiAc296FanMedium,
    kHitachiAc296FanHigh,
    kHitachiAc296FanAuto,
    kHitachiAc296MinTemp,
    kHitachiAc296MaxTemp,
    # Constants - HitachiAC3 (variable 120-216 bits)
    kHitachiAc3Bits,
    kHitachiAc3MinBits,
)

# Import from samsung (ir_Samsung.cpp translations)
from app.core.ir_protocols.samsung import (
    # Send functions for all 3 Samsung variants
    sendSAMSUNG,
    sendSamsung36,
    sendSamsungAC,
    # Decode functions for all 3 Samsung variants
    decodeSAMSUNG,
    decodeSamsung36,
    decodeSamsungAC,
    # Encode function
    encodeSAMSUNG,
    # Class
    IRSamsungAc,
    # Constants - Samsung (32-bit)
    kSamsungBits,
    kSamsungMinTemp,
    kSamsungAcMinTemp,
    kSamsungAcMaxTemp,
    kSamsungAcAutoTemp,
    kSamsungAcAuto,
    kSamsungAcCool,
    kSamsungAcDry,
    kSamsungAcFan,
    kSamsungAcHeat,
    kSamsungAcFanAuto,
    kSamsungAcFanLow,
    kSamsungAcFanMed,
    kSamsungAcFanHigh,
    kSamsungAcFanAuto2,
    kSamsungAcFanTurbo,
    # Constants - Samsung36 (36-bit)
    kSamsung36Bits,
    # Constants - Samsung AC
    kSamsungAcStateLength,
    kSamsungAcExtendedStateLength,
    kSamsungAcSectionLength,
)

# Import from lg (ir_LG.cpp translations)
from app.core.ir_protocols.lg import (
    # Send functions for both LG variants
    sendLG,
    sendLG2,
    # Decode function
    decodeLG,
    # Encode function
    encodeLG,
    # Class
    IRLgAc,
    # Constants - LG (28-bit)
    kLgBits,
    kLg32Bits,
    kLgAcFanLowest,
    kLgAcFanLow,
    kLgAcFanMedium,
    kLgAcFanMax,
    kLgAcFanAuto,
    kLgAcFanLowAlt,
    kLgAcFanHigh,
    kLgAcMinTemp,
    kLgAcMaxTemp,
    kLgAcCool,
    kLgAcDry,
    kLgAcFan,
    kLgAcAuto,
    kLgAcHeat,
    kLgAcOffCommand,
    kLgAcLightToggle,
    kLgAcSwingVToggle,
    kLgAcSwingVLowest,
    kLgAcSwingVLow,
    kLgAcSwingVMiddle,
    kLgAcSwingVUpperMiddle,
    kLgAcSwingVHigh,
    kLgAcSwingVHighest,
    kLgAcSwingVSwing,
    kLgAcSwingVAuto,
    kLgAcSwingVOff,
    kLgAcSwingHAuto,
    kLgAcSwingHOff,
    # Model constants
    LG_GE6711AR2853M,
    LG_LG6711A20083V,
    LG_AKB75215403,
    LG_AKB74955603,
    LG_AKB73757604,
)

# Import from carrier (ir_Carrier.cpp translations)
from app.core.ir_protocols.carrier import (
    # Send functions for all 5 Carrier variants
    sendCarrierAC,
    sendCarrierAC40,
    sendCarrierAC64,
    sendCarrierAC84,
    sendCarrierAC128,
    # Decode functions for all 5 Carrier variants
    decodeCarrierAC,
    decodeCarrierAC40,
    decodeCarrierAC64,
    decodeCarrierAC84,
    decodeCarrierAC128,
    # Class
    IRCarrierAc64,
    # Constants - Carrier AC (32-bit)
    kCarrierAcBits,
    # Constants - Carrier AC40 (40-bit)
    kCarrierAc40Bits,
    # Constants - Carrier AC64 (64-bit)
    kCarrierAc64Bits,
    kCarrierAc64Heat,
    kCarrierAc64Cool,
    kCarrierAc64Fan,
    kCarrierAc64FanAuto,
    kCarrierAc64FanLow,
    kCarrierAc64FanMedium,
    kCarrierAc64FanHigh,
    kCarrierAc64MinTemp,
    kCarrierAc64MaxTemp,
    kCarrierAc64TimerMax,
    kCarrierAc64TimerMin,
    # Constants - Carrier AC84 (84-bit)
    kCarrierAc84Bits,
    # Constants - Carrier AC128 (128-bit)
    kCarrierAc128Bits,
    kCarrierAc128StateLength,
)

# Import from panasonic (ir_Panasonic.cpp translations)
from app.core.ir_protocols.panasonic import (
    # Send functions for all 3 Panasonic variants
    sendPanasonic64,
    sendPanasonic,
    sendPanasonicAC,
    sendPanasonicAC32,
    # Decode functions for all 3 Panasonic variants
    decodePanasonic,
    decodePanasonicAC,
    decodePanasonicAC32,
    # Encode function
    encodePanasonic,
    # Classes
    IRPanasonicAc,
    IRPanasonicAc32,
    # Constants - Panasonic (48-bit)
    kPanasonicBits,
    kPanasonic40Bits,
    kPanasonicFreq,
    # Constants - Panasonic AC (216-bit)
    kPanasonicAcStateLength,
    kPanasonicAcBits,
    kPanasonicAcShortBits,
    kPanasonicAcAuto,
    kPanasonicAcDry,
    kPanasonicAcCool,
    kPanasonicAcHeat,
    kPanasonicAcFan,
    kPanasonicAcFanMin,
    kPanasonicAcFanLow,
    kPanasonicAcFanMed,
    kPanasonicAcFanHigh,
    kPanasonicAcFanMax,
    kPanasonicAcFanAuto,
    kPanasonicAcMinTemp,
    kPanasonicAcMaxTemp,
    kPanasonicAcSwingVAuto,
    kPanasonicAcSwingVHighest,
    kPanasonicAcSwingVHigh,
    kPanasonicAcSwingVMiddle,
    kPanasonicAcSwingVLow,
    kPanasonicAcSwingVLowest,
    kPanasonicAcSwingHAuto,
    kPanasonicAcSwingHMiddle,
    kPanasonicAcSwingHFullLeft,
    kPanasonicAcSwingHLeft,
    kPanasonicAcSwingHRight,
    kPanasonicAcSwingHFullRight,
    # Constants - Panasonic AC32 (32-bit)
    kPanasonicAc32Bits,
    kPanasonicAc32Fan,
    kPanasonicAc32Cool,
    kPanasonicAc32Dry,
    kPanasonicAc32Heat,
    kPanasonicAc32Auto,
    kPanasonicAc32FanMin,
    kPanasonicAc32FanLow,
    kPanasonicAc32FanMed,
    kPanasonicAc32FanHigh,
    kPanasonicAc32FanMax,
    kPanasonicAc32FanAuto,
    kPanasonicAc32SwingVAuto,
    # Model constants
    kPanasonicUnknown,
    kPanasonicDke,
    kPanasonicJke,
    kPanasonicNke,
    kPanasonicLke,
    kPanasonicCkp,
    kPanasonicRkr,
)

# Import from haier (ir_Haier.cpp translations)
from app.core.ir_protocols.haier import (
    # Send functions for all 4 Haier variants
    sendHaierAC,
    sendHaierACYRW02,
    sendHaierAC176,
    sendHaierAC160,
    # Decode functions for all 4 Haier variants
    decodeHaierAC,
    decodeHaierACYRW02,
    decodeHaierAC176,
    decodeHaierAC160,
    # Classes for all 4 Haier variants
    IRHaierAC,
    IRHaierAC176,
    IRHaierACYRW02,
    IRHaierAC160,
    # Constants - HAIER_AC (72-bit)
    kHaierACBits,
    kHaierACStateLength,
    kHaierAcPrefix,
    kHaierAcMinTemp,
    kHaierAcDefTemp,
    kHaierAcMaxTemp,
    kHaierAcCmdOff,
    kHaierAcCmdOn,
    kHaierAcCmdMode,
    kHaierAcCmdFan,
    kHaierAcCmdTempUp,
    kHaierAcCmdTempDown,
    kHaierAcCmdSleep,
    kHaierAcCmdTimerSet,
    kHaierAcCmdTimerCancel,
    kHaierAcCmdHealth,
    kHaierAcCmdSwing,
    kHaierAcSwingVOff,
    kHaierAcSwingVUp,
    kHaierAcSwingVDown,
    kHaierAcSwingVChg,
    kHaierAcAuto,
    kHaierAcCool,
    kHaierAcDry,
    kHaierAcHeat,
    kHaierAcFan,
    kHaierAcFanAuto,
    kHaierAcFanLow,
    kHaierAcFanMed,
    kHaierAcFanHigh,
    kHaierAcMaxTime,
    # Constants - HAIER_AC_YRW02 (112-bit)
    kHaierACYRW02Bits,
    kHaierACYRW02StateLength,
    kHaierAcYrw02MinTempC,
    kHaierAcYrw02MaxTempC,
    kHaierAcYrw02MinTempF,
    kHaierAcYrw02MaxTempF,
    kHaierAcYrw02DefTempC,
    kHaierAcYrw02ModelA,
    kHaierAcYrw02ModelB,
    kHaierAcYrw02SwingVOff,
    kHaierAcYrw02SwingVTop,
    kHaierAcYrw02SwingVMiddle,
    kHaierAcYrw02SwingVBottom,
    kHaierAcYrw02SwingVDown,
    kHaierAcYrw02SwingVAuto,
    kHaierAcYrw02SwingHMiddle,
    kHaierAcYrw02SwingHLeftMax,
    kHaierAcYrw02SwingHLeft,
    kHaierAcYrw02SwingHRight,
    kHaierAcYrw02SwingHRightMax,
    kHaierAcYrw02SwingHAuto,
    kHaierAcYrw02FanHigh,
    kHaierAcYrw02FanMed,
    kHaierAcYrw02FanLow,
    kHaierAcYrw02FanAuto,
    kHaierAcYrw02Auto,
    kHaierAcYrw02Cool,
    kHaierAcYrw02Dry,
    kHaierAcYrw02Heat,
    kHaierAcYrw02Fan,
    kHaierAcYrw02ButtonTempUp,
    kHaierAcYrw02ButtonTempDown,
    kHaierAcYrw02ButtonSwingV,
    kHaierAcYrw02ButtonSwingH,
    kHaierAcYrw02ButtonFan,
    kHaierAcYrw02ButtonPower,
    kHaierAcYrw02ButtonMode,
    kHaierAcYrw02ButtonHealth,
    kHaierAcYrw02ButtonTurbo,
    kHaierAcYrw02ButtonSleep,
    kHaierAcYrw02ButtonTimer,
    kHaierAcYrw02ButtonLock,
    kHaierAcYrw02ButtonCFAB,
    kHaierAcYrw02NoTimers,
    kHaierAcYrw02OffTimer,
    kHaierAcYrw02OnTimer,
    kHaierAcYrw02OnThenOffTimer,
    kHaierAcYrw02OffThenOnTimer,
    # Constants - HAIER_AC176 (176-bit)
    kHaierAC176Bits,
    kHaierAC176StateLength,
    kHaierAc176Prefix,
    HAIER_AC176_REMOTE_MODEL_A,
    HAIER_AC176_REMOTE_MODEL_B,
    # Constants - HAIER_AC160 (160-bit)
    kHaierAC160Bits,
    kHaierAC160StateLength,
    kHaierAc160Prefix,
    kHaierAc160SwingVOff,
    kHaierAc160SwingVTop,
    kHaierAc160SwingVHighest,
    kHaierAc160SwingVHigh,
    kHaierAc160SwingVMiddle,
    kHaierAc160SwingVLow,
    kHaierAc160SwingVLowest,
    kHaierAc160SwingVAuto,
    kHaierAc160ButtonLight,
    kHaierAc160ButtonAuxHeating,
    kHaierAc160ButtonClean,
)

# Import from sharp (ir_Sharp.cpp translations)
from app.core.ir_protocols.sharp import (
    # Send functions for Sharp and Sharp AC
    sendSharpRaw,
    sendSharp,
    sendSharpAc,
    # Decode functions
    decodeSharp,
    decodeSharpAc,
    # Encode function
    encodeSharp,
    # Checksum functions
    calcChecksumSharpAc,
    validChecksumSharpAc,
    # Class
    IRSharpAc,
    # Constants - Sharp (15-bit)
    kSharpBits,
    kSharpAddressBits,
    kSharpCommandBits,
    kSharpBitMark,
    kSharpOneSpace,
    kSharpZeroSpace,
    kSharpGap,
    # Constants - Sharp AC
    kSharpAcStateLength,
    kSharpAcBits,
    kSharpAcHdrMark,
    kSharpAcHdrSpace,
    kSharpAcBitMark,
    kSharpAcOneSpace,
    kSharpAcZeroSpace,
    kSharpAcGap,
    kSharpAcMinTemp,
    kSharpAcMaxTemp,
    kSharpAcAuto,
    kSharpAcFan,
    kSharpAcDry,
    kSharpAcCool,
    kSharpAcHeat,
    kSharpAcFanAuto,
    kSharpAcFanMin,
    kSharpAcFanMed,
    kSharpAcFanA705Low,
    kSharpAcFanHigh,
    kSharpAcFanA705Med,
    kSharpAcFanMax,
    kSharpAcSwingVIgnore,
    kSharpAcSwingVHigh,
    kSharpAcSwingVOff,
    kSharpAcSwingVMid,
    kSharpAcSwingVLow,
    kSharpAcSwingVCoanda,
    kSharpAcSwingVToggle,
    kSharpAcPowerOn,
    kSharpAcPowerOff,
    kSharpAcSpecialPower,
    kSharpAcSpecialTurbo,
    kSharpAcSpecialFan,
    kSharpAcSpecialSwing,
    # Model constants
    SHARP_A907,
    SHARP_A705,
    SHARP_A903,
)

# Import from whirlpool (ir_Whirlpool.cpp translations)
from app.core.ir_protocols.whirlpool import (
    # Send function
    sendWhirlpoolAC,
    # Decode function
    decodeWhirlpoolAC,
    # Checksum function
    validChecksumWhirlpoolAc,
    # Class
    IRWhirlpoolAc,
    # Constants
    kWhirlpoolAcStateLength,
    kWhirlpoolAcBits,
    kWhirlpoolAcHdrMark,
    kWhirlpoolAcHdrSpace,
    kWhirlpoolAcBitMark,
    kWhirlpoolAcOneSpace,
    kWhirlpoolAcZeroSpace,
    kWhirlpoolAcGap,
    kWhirlpoolAcMinTemp,
    kWhirlpoolAcMaxTemp,
    kWhirlpoolAcAutoTemp,
    kWhirlpoolAcHeat,
    kWhirlpoolAcAuto,
    kWhirlpoolAcCool,
    kWhirlpoolAcDry,
    kWhirlpoolAcFan,
    kWhirlpoolAcFanAuto,
    kWhirlpoolAcFanHigh,
    kWhirlpoolAcFanMedium,
    kWhirlpoolAcFanLow,
    kWhirlpoolAcCommandLight,
    kWhirlpoolAcCommandPower,
    kWhirlpoolAcCommandTemp,
    kWhirlpoolAcCommandSleep,
    kWhirlpoolAcCommandSuper,
    kWhirlpoolAcCommandOnTimer,
    kWhirlpoolAcCommandMode,
    kWhirlpoolAcCommandSwing,
    kWhirlpoolAcCommandIFeel,
    kWhirlpoolAcCommandFanSpeed,
    kWhirlpoolAcCommand6thSense,
    kWhirlpoolAcCommandOffTimer,
    # Model constants
    WHIRLPOOL_DG11J13A,
    WHIRLPOOL_DG11J191,
)

# Import from toshiba (ir_Toshiba.cpp translations)
from app.core.ir_protocols.toshiba import (
    # Send function
    sendToshibaAC,
    # Decode function
    decodeToshibaAC,
    # Class
    IRToshibaAC,
    # Constants
    kToshibaACStateLengthShort,
    kToshibaACStateLength,
    kToshibaACStateLengthLong,
    kToshibaAcSwingStep,
    kToshibaAcSwingOn,
    kToshibaAcSwingOff,
    kToshibaAcSwingToggle,
    kToshibaAcMinTemp,
    kToshibaAcMaxTemp,
    kToshibaAcAuto,
    kToshibaAcCool,
    kToshibaAcDry,
    kToshibaAcHeat,
    kToshibaAcFan,
    kToshibaAcOff,
    kToshibaAcFanAuto,
    kToshibaAcFanMin,
    kToshibaAcFanMed,
    kToshibaAcFanMax,
    kToshibaAcTurboOn,
    kToshibaAcEconoOn,
    kToshibaAcRemoteA,
    kToshibaAcRemoteB,
)

# Import from midea (ir_Midea.cpp translations)
from app.core.ir_protocols.midea import (
    # Send functions for both Midea variants
    sendMidea,
    sendMidea24,
    # Decode functions for both Midea variants
    decodeMidea,
    decodeMidea24,
    # Class
    IRMideaAC,
    # Constants - Midea (48-bit)
    kMideaBits,
    kMideaACMinTempF,
    kMideaACMaxTempF,
    kMideaACMinTempC,
    kMideaACMaxTempC,
    kMideaACMinSensorTempC,
    kMideaACMaxSensorTempC,
    kMideaACMinSensorTempF,
    kMideaACMaxSensorTempF,
    kMideaACSensorTempOnTimerOff,
    kMideaACTimerOff,
    kMideaACCool,
    kMideaACDry,
    kMideaACAuto,
    kMideaACHeat,
    kMideaACFan,
    kMideaACFanAuto,
    kMideaACFanLow,
    kMideaACFanMed,
    kMideaACFanHigh,
    kMideaACToggleSwingV,
    kMideaACToggleEcono,
    kMideaACToggleLight,
    kMideaACToggleTurbo,
    kMideaACToggleSelfClean,
    kMideaACToggle8CHeat,
    kMideaACQuietOn,
    kMideaACQuietOff,
    kMideaACTypeCommand,
    kMideaACTypeSpecial,
    kMideaACTypeFollow,
    # Constants - Midea24 (24-bit)
    kMidea24Bits,
)

# Import from coolix (ir_Coolix.cpp translations)
from app.core.ir_protocols.coolix import (
    # Send functions for both Coolix variants
    sendCOOLIX,
    sendCoolix48,
    # Decode functions for both Coolix variants
    decodeCOOLIX,
    decodeCoolix48,
    # Class
    IRCoolixAC,
    # Constants - Coolix (24-bit)
    kCoolixBits,
    kCoolixCool,
    kCoolixDry,
    kCoolixAuto,
    kCoolixHeat,
    kCoolixFan,
    kCoolixFanMin,
    kCoolixFanMed,
    kCoolixFanMax,
    kCoolixFanAuto,
    kCoolixFanAuto0,
    kCoolixFanZoneFollow,
    kCoolixFanFixed,
    kCoolixTempMin,
    kCoolixTempMax,
    kCoolixSensorTempMax,
    kCoolixSensorTempIgnoreCode,
    kCoolixOff,
    kCoolixSwing,
    kCoolixSwingH,
    kCoolixSwingV,
    kCoolixSleep,
    kCoolixTurbo,
    kCoolixLed,
    kCoolixClean,
    kCoolixCmdFan,
    kCoolixDefaultState,
    kCoolixDefaultRepeat,
    # Constants - Coolix48 (48-bit)
    kCoolix48Bits,
)

# Import from kelvinator (ir_Kelvinator.cpp translations)
from app.core.ir_protocols.kelvinator import (
    # Send function
    sendKelvinator,
    # Decode function
    decodeKelvinator,
    # Checksum functions
    calcBlockChecksum,
    # Class
    IRKelvinatorAC,
    # Constants
    kKelvinatorStateLength,
    kKelvinatorAuto,
    kKelvinatorCool,
    kKelvinatorDry,
    kKelvinatorFan,
    kKelvinatorHeat,
    kKelvinatorBasicFanMax,
    kKelvinatorFanAuto,
    kKelvinatorFanMin,
    kKelvinatorFanMax,
    kKelvinatorMinTemp,
    kKelvinatorMaxTemp,
    kKelvinatorAutoTemp,
    kKelvinatorSwingVOff,
    kKelvinatorSwingVAuto,
    kKelvinatorSwingVHighest,
    kKelvinatorSwingVUpperMiddle,
    kKelvinatorSwingVMiddle,
    kKelvinatorSwingVLowerMiddle,
    kKelvinatorSwingVLowest,
    kKelvinatorSwingVLowAuto,
    kKelvinatorSwingVMiddleAuto,
    kKelvinatorSwingVHighAuto,
)

# Import from electra (ir_Electra.cpp translations)
from app.core.ir_protocols.electra import (
    # Send function
    sendElectraAC,
    # Decode function
    decodeElectraAC,
    # Class
    IRElectraAc,
    # Constants
    kElectraAcStateLength,
    kElectraAcBits,
    kElectraAcMinTemp,
    kElectraAcMaxTemp,
    kElectraAcTempDelta,
    kElectraAcSwingOn,
    kElectraAcSwingOff,
    kElectraAcFanAuto,
    kElectraAcFanLow,
    kElectraAcFanMed,
    kElectraAcFanHigh,
    kElectraAcAuto,
    kElectraAcCool,
    kElectraAcDry,
    kElectraAcHeat,
    kElectraAcFan,
    kElectraAcLightToggleOn,
    kElectraAcLightToggleMask,
    kElectraAcLightToggleOff,
    kElectraAcSensorTempDelta,
    kElectraAcSensorMinTemp,
    kElectraAcSensorMaxTemp,
)

# Import from teco (ir_Teco.cpp translations)
from app.core.ir_protocols.teco import (
    # Send function
    sendTeco,
    # Decode function
    decodeTeco,
    # Class
    IRTecoAc,
    # Constants
    kTecoBits,
    kTecoAuto,
    kTecoCool,
    kTecoDry,
    kTecoFan,
    kTecoHeat,
    kTecoFanAuto,
    kTecoFanLow,
    kTecoFanMed,
    kTecoFanHigh,
    kTecoMinTemp,
    kTecoMaxTemp,
    kTecoReset,
)

# Import from neoclima (ir_Neoclima.cpp translations)
from app.core.ir_protocols.neoclima import (
    # Send function
    sendNeoclima,
    # Decode function
    decodeNeoclima,
    # Checksum functions
    calcChecksum as calcChecksumNeoclima,
    validChecksum as validChecksumNeoclima,
    # Class
    IRNeoclimaAc,
    # Constants - Neoclima (96-bit)
    kNeoclimaBits,
    kNeoclimaStateLength,
    kNeoclimaButtonPower,
    kNeoclimaButtonMode,
    kNeoclimaButtonTempUp,
    kNeoclimaButtonTempDown,
    kNeoclimaButtonSwing,
    kNeoclimaButtonFanSpeed,
    kNeoclimaButtonAirFlow,
    kNeoclimaButtonHold,
    kNeoclimaButtonSleep,
    kNeoclimaButtonTurbo,
    kNeoclimaButtonLight,
    kNeoclimaButtonEcono,
    kNeoclimaButtonEye,
    kNeoclimaButtonFollow,
    kNeoclimaButtonIon,
    kNeoclimaButtonFresh,
    kNeoclimaButton8CHeat,
    kNeoclimaButtonTempUnit,
    kNeoclimaSwingVOn,
    kNeoclimaSwingVOff,
    kNeoclimaFanAuto,
    kNeoclimaFanHigh,
    kNeoclimaFanMed,
    kNeoclimaFanLow,
    kNeoclimaFollowMe,
    kNeoclimaMinTempC,
    kNeoclimaMaxTempC,
    kNeoclimaMinTempF,
    kNeoclimaMaxTempF,
    kNeoclimaAuto,
    kNeoclimaCool,
    kNeoclimaDry,
    kNeoclimaFan,
    kNeoclimaHeat,
)

# Import from argo (ir_Argo.cpp translations - WREM-2 variant)
from app.core.ir_protocols.argo import (
    # Send function
    sendArgo,
    # Decode function
    decodeArgo,
    # Checksum functions
    calcChecksum as calcChecksumArgo,
    validChecksum as validChecksumArgo,
    getChecksum as getChecksumArgo,
    # Class
    IRArgoAC,
    # Constants - Argo WREM-2 (96-bit)
    kArgoBits,
    kArgoStateLength,
    kArgoShortStateLength,
    kArgoPreamble1,
    kArgoPreamble2,
    kArgoPost,
    kArgoTempDelta,
    kArgoMaxRoomTemp,
    kArgoMinTemp,
    kArgoMaxTemp,
    kArgoCool,
    kArgoDry,
    kArgoAuto,
    kArgoOff,
    kArgoHeat,
    kArgoHeatAuto,
    kArgoFanAuto,
    kArgoFan1,
    kArgoFan2,
    kArgoFan3,
    kArgoFlapAuto,
    kArgoFlap1,
    kArgoFlap2,
    kArgoFlap3,
    kArgoFlap4,
    kArgoFlap5,
    kArgoFlap6,
    kArgoFlapFull,
)

# Import from trotec (ir_Trotec.cpp translations - both Trotec and Trotec3550)
from app.core.ir_protocols.trotec import (
    # Send functions for both Trotec variants
    sendTrotec,
    sendTrotec3550,
    # Decode functions for both Trotec variants
    decodeTrotec,
    decodeTrotec3550,
    # Checksum functions for both variants
    calcChecksumTrotec,
    validChecksumTrotec,
    calcChecksumTrotec3550,
    validChecksumTrotec3550,
    # Classes for both variants
    IRTrotecESP,
    IRTrotec3550,
    # Constants - Trotec (72-bit)
    kTrotecBits,
    kTrotecStateLength,
    kTrotecIntro1,
    kTrotecIntro2,
    kTrotecAuto,
    kTrotecCool,
    kTrotecDry,
    kTrotecFan,
    kTrotecFanLow,
    kTrotecFanMed,
    kTrotecFanHigh,
    kTrotecMinTemp,
    kTrotecDefTemp,
    kTrotecMaxTemp,
    kTrotecMaxTimer,
    # Constants - Trotec3550 (72-bit)
    kTrotec3550MinTempC,
    kTrotec3550MaxTempC,
    kTrotec3550MinTempF,
    kTrotec3550MaxTempF,
    kTrotec3550TimerMax,
)

# Import from goodweather (ir_Goodweather.cpp translations)
from app.core.ir_protocols.goodweather import (
    # Send function
    sendGoodweather,
    # Decode function
    decodeGoodweather,
    # Class
    IRGoodweatherAc,
    # Constants - Goodweather (64-bit)
    kGoodweatherBitMark,
    kGoodweatherOneSpace,
    kGoodweatherZeroSpace,
    kGoodweatherHdrMark,
    kGoodweatherHdrSpace,
    kGoodweatherExtraTolerance,
    kGoodweatherBits,
    kGoodweatherStateLength,
    kGoodweatherAuto,
    kGoodweatherCool,
    kGoodweatherDry,
    kGoodweatherFan,
    kGoodweatherHeat,
    kGoodweatherSwingFast,
    kGoodweatherSwingSlow,
    kGoodweatherSwingOff,
    kGoodweatherFanAuto,
    kGoodweatherFanHigh,
    kGoodweatherFanMed,
    kGoodweatherFanLow,
    kGoodweatherTempMin,
    kGoodweatherTempMax,
    kGoodweatherCmdPower,
    kGoodweatherCmdMode,
    kGoodweatherCmdUpTemp,
    kGoodweatherCmdDownTemp,
    kGoodweatherCmdSwing,
    kGoodweatherCmdFan,
    kGoodweatherCmdTimer,
    kGoodweatherCmdAirFlow,
    kGoodweatherCmdHold,
    kGoodweatherCmdSleep,
    kGoodweatherCmdTurbo,
    kGoodweatherCmdLight,
    kGoodweatherStateInit,
)

# Import from sanyo (ir_Sanyo.cpp translations - 4 variants)
from app.core.ir_protocols.sanyo import (
    # Send functions for all 4 Sanyo variants
    sendSanyoLC7461,
    sendSanyoAc,
    sendSanyoAc88,
    sendSanyoAc152,
    # Decode functions for all 4 Sanyo variants
    decodeSanyoLC7461,
    decodeSanyoAc,
    decodeSanyoAc88,
    decodeSanyoAc152,
    # Encode function
    encodeSanyoLC7461,
    # Classes
    IRSanyoAc,
    IRSanyoAc88,
    # Constants - SA 8650B (common timing)
    kSanyoSA8650BHdrMark,
    kSanyoSA8650BHdrSpace,
    kSanyoSA8650BBitMark,
    kSanyoSA8650BOneSpace,
    kSanyoSA8650BZeroSpace,
    kSanyoSA8650BMinGap,
    # Constants - LC7461 (42-bit)
    kSanyoLC7461Bits,
    kSanyoLC7461AddressMask,
    kSanyoLC7461CommandMask,
    kSanyoLC7461MinRepeat,
    kSanyoLC7461MinMessageLength,
    kSanyoLC7461HdrMark,
    kSanyoLC7461HdrSpace,
    kSanyoLC7461BitMark,
    kSanyoLC7461OneSpace,
    kSanyoLC7461ZeroSpace,
    kSanyoLC7461MinGap,
    # Constants - SANYO_AC (72-bit)
    kSanyoAcStateLength,
    kSanyoAcBits,
    kSanyoAcHdrMark,
    kSanyoAcHdrSpace,
    kSanyoAcBitMark,
    kSanyoAcOneSpace,
    kSanyoAcZeroSpace,
    kSanyoAcMinGap,
    kSanyoAcFreq,
    kSanyoAcMinTemp,
    kSanyoAcMaxTemp,
    kSanyoAcTempDelta,
    kSanyoAcHeat,
    kSanyoAcCool,
    kSanyoAcDry,
    kSanyoAcAuto,
    kSanyoAcFanAuto,
    kSanyoAcFanHigh,
    kSanyoAcFanLow,
    kSanyoAcSwingVAuto,
    kSanyoAcSwingVLowest,
    kSanyoAcSwingVLow,
    kSanyoAcSwingVLowerMiddle,
    kSanyoAcSwingVUpperMiddle,
    kSanyoAcSwingVHigh,
    kSanyoAcSwingVHighest,
    # Constants - SANYO_AC88 (88-bit)
    kSanyoAc88StateLength,
    kSanyoAc88Bits,
    kSanyoAc88MinRepeat,
    kSanyoAc88HdrMark,
    kSanyoAc88HdrSpace,
    kSanyoAc88BitMark,
    kSanyoAc88OneSpace,
    kSanyoAc88ZeroSpace,
    kSanyoAc88MinGap,
    kSanyoAc88Freq,
    kSanyoAc88ExtraTolerance,
    kSanyoAc88MinTemp,
    kSanyoAc88MaxTemp,
    kSanyoAc88FanAuto,
    kSanyoAc88FanLow,
    kSanyoAc88FanMed,
    kSanyoAc88FanHigh,
    kSanyoAc88Auto,
    kSanyoAc88Cool,
    kSanyoAc88Heat,
    kSanyoAc88Dry,
    kSanyoAc88Fan,
    kSanyoAc88FeelCool,
    kSanyoAc88FeelHeat,
    # Constants - SANYO_AC152 (152-bit)
    kSanyoAc152StateLength,
    kSanyoAc152Bits,
    kSanyoAc152HdrMark,
    kSanyoAc152HdrSpace,
    kSanyoAc152BitMark,
    kSanyoAc152OneSpace,
    kSanyoAc152ZeroSpace,
    kSanyoAc152MinGap,
    kSanyoAc152Freq,
    kSanyoAc152ExtraTolerance,
)

# Import from tcl (ir_Tcl.cpp translations - 2 variants)
from app.core.ir_protocols.tcl import (
    # Send functions for both TCL variants
    sendTcl112Ac,
    sendTcl96Ac,
    # Decode functions for both TCL variants
    decodeTcl112Ac,
    decodeTcl96Ac,
    # Class
    IRTcl112Ac,
    # Constants - TCL112AC (112-bit)
    kTcl112AcHdrMark,
    kTcl112AcHdrSpace,
    kTcl112AcBitMark,
    kTcl112AcOneSpace,
    kTcl112AcZeroSpace,
    kTcl112AcGap,
    kTcl112AcHdrMarkTolerance,
    kTcl112AcTolerance,
    kTcl112AcStateLength,
    kTcl112AcBits,
    kTcl112AcTimerResolution,
    kTcl112AcTimerMax,
    kTcl112AcHeat,
    kTcl112AcDry,
    kTcl112AcCool,
    kTcl112AcFan,
    kTcl112AcAuto,
    kTcl112AcFanAuto,
    kTcl112AcFanMin,
    kTcl112AcFanLow,
    kTcl112AcFanMed,
    kTcl112AcFanHigh,
    kTcl112AcFanNight,
    kTcl112AcFanQuiet,
    kTcl112AcTempMax,
    kTcl112AcTempMin,
    kTcl112AcSwingVOff,
    kTcl112AcSwingVHighest,
    kTcl112AcSwingVHigh,
    kTcl112AcSwingVMiddle,
    kTcl112AcSwingVLow,
    kTcl112AcSwingVLowest,
    kTcl112AcSwingVOn,
    kTcl112AcNormal,
    kTcl112AcSpecial,
    # Constants - TCL96AC (96-bit)
    kTcl96AcHdrMark,
    kTcl96AcHdrSpace,
    kTcl96AcBitMark,
    kTcl96AcGap,
    kTcl96AcSpaceCount,
    kTcl96AcBitSpaces,
    kTcl96AcStateLength,
    kTcl96AcBits,
)

# Import from vestel (ir_Vestel.cpp translations)
from app.core.ir_protocols.vestel import (
    # Send function
    sendVestelAc,
    # Decode function
    decodeVestelAc,
    # Class
    IRVestelAc,
    # Constants
    kVestelAcHdrMark,
    kVestelAcHdrSpace,
    kVestelAcBitMark,
    kVestelAcOneSpace,
    kVestelAcZeroSpace,
    kVestelAcTolerance,
    kVestelAcBits,
    kVestelAcMinTempH,
    kVestelAcMinTempC,
    kVestelAcMaxTemp,
    kVestelAcAuto,
    kVestelAcCool,
    kVestelAcDry,
    kVestelAcFan,
    kVestelAcHeat,
    kVestelAcFanAuto,
    kVestelAcFanLow,
    kVestelAcFanMed,
    kVestelAcFanHigh,
    kVestelAcFanAutoCool,
    kVestelAcFanAutoHot,
    kVestelAcNormal,
    kVestelAcSleep,
    kVestelAcTurbo,
    kVestelAcIon,
    kVestelAcSwing,
    kVestelAcStateDefault,
    kVestelAcTimeStateDefault,
)

# Import from amcor (ir_Amcor.cpp translations)
from app.core.ir_protocols.amcor import (
    # Send function
    sendAmcor,
    # Decode function
    decodeAmcor,
    # Checksum functions
    calcChecksumAmcor,
    validChecksumAmcor,
    # Class
    IRAmcorAc,
    # Constants
    kAmcorHdrMark,
    kAmcorHdrSpace,
    kAmcorOneMark,
    kAmcorOneSpace,
    kAmcorZeroMark,
    kAmcorZeroSpace,
    kAmcorFooterMark,
    kAmcorGap,
    kAmcorStateLength,
    kAmcorBits,
    kAmcorDefaultRepeat,
    kAmcorCool,
    kAmcorHeat,
    kAmcorDry,
    kAmcorFan,
    kAmcorAuto,
    kAmcorFanMin,
    kAmcorFanMed,
    kAmcorFanMax,
    kAmcorFanAuto,
    kAmcorMinTemp,
    kAmcorMaxTemp,
    kAmcorPowerOn,
    kAmcorPowerOff,
    kAmcorMax,
    kAmcorVentOn,
    kAmcorTolerance,
)

# Import from corona (ir_Corona.cpp translations)
from app.core.ir_protocols.corona import (
    # Send function
    sendCoronaAc,
    # Decode function
    decodeCoronaAc,
    # Checksum functions
    checksumCorona,
    validSectionCorona,
    # Class
    IRCoronaAc,
    # Constants - Timing
    kCoronaAcHdrMark,
    kCoronaAcHdrSpace,
    kCoronaAcBitMark,
    kCoronaAcOneSpace,
    kCoronaAcZeroSpace,
    kCoronaAcGap,
    kCoronaAcSectionGap,
    kCoronaAcFreq,
    kCoronaAcTolerance,
    kCoronaAcExtraTolerance,
    # Constants - State
    kCoronaAcStateLength,
    kCoronaAcBits,
    kCoronaAcSections,
    kCoronaAcSection1Length,
    kCoronaAcSectionLength,
    kCoronaAcSectionBytes,
    kCoronaAcSectionDataLength,
    # Constants - Section headers
    kCoronaAcSectionHeader0,
    kCoronaAcSectionHeader1,
    kCoronaAcSectionLabelSettings,
    kCoronaAcSectionLabelOnTimer,
    kCoronaAcSectionLabelOffTimer,
    # Constants - Modes
    kCoronaAcModeHeat,
    kCoronaAcModeDry,
    kCoronaAcModeCool,
    kCoronaAcModeFan,
    # Constants - Fan speeds
    kCoronaAcFanAuto,
    kCoronaAcFanLow,
    kCoronaAcFanMedium,
    kCoronaAcFanHigh,
    # Constants - Temperature
    kCoronaAcMinTemp,
    kCoronaAcMaxTemp,
    # Constants - Sections
    kCoronaAcSettingsSection,
    kCoronaAcOnTimerSection,
    kCoronaAcOffTimerSection,
    # Constants - Timer
    kCoronaAcTimerMax,
    kCoronaAcTimerOff,
    kCoronaAcTimerUnitsPerMin,
)

# Import from bosch (ir_Bosch.cpp translations)
from app.core.ir_protocols.bosch import (
    # Send function
    sendBosch144,
    # Decode function
    decodeBosch144,
    # Class
    IRBosch144AC,
    # Constants
    kBoschHdrMark,
    kBoschBitMark,
    kBoschHdrSpace,
    kBoschOneSpace,
    kBoschZeroSpace,
    kBoschFooterSpace,
    kBoschFreq,
    kBosch144NrOfSections,
    kBosch144BytesPerSection,
    kBosch144StateLength,
    kBosch144Cool,
    kBosch144Dry,
    kBosch144Auto,
    kBosch144Heat,
    kBosch144Fan,
    kBosch144Fan20,
    kBosch144Fan40,
    kBosch144Fan60,
    kBosch144Fan80,
    kBosch144Fan100,
    kBosch144FanAuto,
    kBosch144FanAuto0,
    kBosch144TempMin,
    kBosch144TempMax,
    kBosch144TempRange,
    kBosch144TempMap,
    kBosch144Off,
    kBosch144DefaultState,
)

# Import from delonghi (ir_Delonghi.cpp translations)
from app.core.ir_protocols.delonghi import (
    # Send function
    sendDelonghiAc,
    # Decode function
    decodeDelonghiAc,
    # Class
    IRDelonghiAc,
    # Constants
    kDelonghiAcHdrMark,
    kDelonghiAcBitMark,
    kDelonghiAcHdrSpace,
    kDelonghiAcOneSpace,
    kDelonghiAcZeroSpace,
    kDelonghiAcGap,
    kDelonghiAcFreq,
    kDelonghiAcOverhead,
    kDelonghiAcBits,
    kDelonghiAcStateLength,
    kDelonghiAcTempMinC,
    kDelonghiAcTempMaxC,
    kDelonghiAcTempMinF,
    kDelonghiAcTempMaxF,
    kDelonghiAcTempAutoDryMode,
    kDelonghiAcTempFanMode,
    kDelonghiAcFanAuto,
    kDelonghiAcFanHigh,
    kDelonghiAcFanMedium,
    kDelonghiAcFanLow,
    kDelonghiAcCool,
    kDelonghiAcDry,
    kDelonghiAcFan,
    kDelonghiAcAuto,
    kDelonghiAcTimerMax,
    kDelonghiAcChecksumOffset,
    kDelonghiAcDefaultRepeat,
)

# Import from voltas (ir_Voltas.cpp translations)
from app.core.ir_protocols.voltas import (
    # Send function
    sendVoltas,
    # Decode function
    decodeVoltas,
    # Class
    IRVoltas,
    # Constants
    kVoltasBitMark,
    kVoltasOneSpace,
    kVoltasZeroSpace,
    kVoltasFreq,
    kVoltasStateLength,
    kVoltasBits,
    kVoltasFan,
    kVoltasHeat,
    kVoltasDry,
    kVoltasCool,
    kVoltasMinTemp,
    kVoltasDryTemp,
    kVoltasMaxTemp,
    kVoltasFanHigh,
    kVoltasFanMed,
    kVoltasFanLow,
    kVoltasFanAuto,
    kVoltasSwingHChange,
    kVoltasSwingHNoChange,
    kVoltasUnknown,
    kVoltas122LZF,
    kNoRepeat,
    kDefaultMessageGap,
)

# Import from york (ir_York.cpp translations)
from app.core.ir_protocols.york import (
    # Send function
    sendYork,
    # Decode function
    decodeYork,
    # Class
    IRYorkAc,
    # Constants
    kYorkHdrMark,
    kYorkBitMark,
    kYorkHdrSpace,
    kYorkOneSpace,
    kYorkZeroSpace,
    kYorkFreq,
    kYorkStateLength,
    kYorkBits,
    kYorkKnownGoodState,
    kYorkMinTemp,
    kYorkMaxTemp,
    kYorkFanLow,
    kYorkFanMedium,
    kYorkFanHigh,
    kYorkFanAuto,
    kYorkHeat,
    kYorkCool,
    kYorkDry,
    kYorkFan,
    kYorkAuto,
)

# Import from kelon (ir_Kelon.cpp translations)
from app.core.ir_protocols.kelon import (
    # Send functions (2 variants)
    sendKelon,
    sendKelon168,
    # Decode functions (2 variants)
    decodeKelon,
    decodeKelon168,
    # Class
    IRKelonAc,
    # Constants
    kKelonHdrMark,
    kKelonHdrSpace,
    kKelonBitMark,
    kKelonOneSpace,
    kKelonZeroSpace,
    kKelonGap,
    kKelonFreq,
    kKelon168FooterSpace,
    kKelon168Section1Size,
    kKelon168Section2Size,
    kKelon168Section3Size,
    kKelonBits,
    kKelon168StateLength,
    kKelon168Bits,
    kKelonModeHeat,
    kKelonModeSmart,
    kKelonModeCool,
    kKelonModeDry,
    kKelonModeFan,
    kKelonFanAuto,
    kKelonFanMin,
    kKelonFanMedium,
    kKelonFanMax,
    kKelonDryGradeMin,
    kKelonDryGradeMax,
    kKelonMinTemp,
    kKelonMaxTemp,
)

# Import from airwell (ir_Airwell.cpp translations)
from app.core.ir_protocols.airwell import (
    # Send function
    sendAirwell,
    # Decode function
    decodeAirwell,
    # Class
    IRAirwellAc,
    # Constants
    kAirwellOverhead,
    kAirwellHalfClockPeriod,
    kAirwellHdrMark,
    kAirwellHdrSpace,
    kAirwellFooterMark,
    kAirwellBits,
    kAirwellMinRepeats,
    kAirwellKnownGoodState,
    kAirwellMinTemp,
    kAirwellMaxTemp,
    kAirwellFanLow,
    kAirwellFanMedium,
    kAirwellFanHigh,
    kAirwellFanAuto,
    kAirwellCool,
    kAirwellHeat,
    kAirwellAuto,
    kAirwellDry,
    kAirwellFan,
)

# Import from symphony (ir_Symphony.cpp translations)
from app.core.ir_protocols.symphony import (
    # Send function
    sendSymphony,
    # Decode function
    decodeSymphony,
    # Constants
    kSymphonyZeroMark,
    kSymphonyZeroSpace,
    kSymphonyOneMark,
    kSymphonyOneSpace,
    kSymphonyFooterGap,
    kSymphonyBits,
    kSymphonyDefaultRepeat,
)

# Import from gorenje (ir_Gorenje.cpp translations)
from app.core.ir_protocols.gorenje import (
    # Send function
    sendGorenje,
    # Decode function
    decodeGorenje,
    # Constants
    kGorenjeMinGap,
    kGorenjeHdrMark,
    kGorenjeHdrSpace,
    kGorenjeBitMark,
    kGorenjeOneSpace,
    kGorenjeZeroSpace,
    kGorenjeFreq,
    kGorenjeTolerance,
    kGorenjeBits,
)

# Import from airton (ir_Airton.cpp translations)
from app.core.ir_protocols.airton import (
    # Send function
    sendAirton,
    # Decode function
    decodeAirton,
    # Class
    IRAirtonAc,
    # Constants
    kAirtonHdrMark,
    kAirtonBitMark,
    kAirtonHdrSpace,
    kAirtonOneSpace,
    kAirtonZeroSpace,
    kAirtonGap,
    kAirtonBits,
    kAirtonStateLength,
    kAirtonDefaultRepeat,
    kAirtonAuto,
    kAirtonCool,
    kAirtonDry,
    kAirtonFan,
    kAirtonHeat,
    kAirtonFanAuto,
    kAirtonFanLow,
    kAirtonFanMed,
    kAirtonFanHigh,
    kAirtonFanTurbo,
    kAirtonFanMax,
    kAirtonMinTemp,
    kAirtonMaxTemp,
)

# Import from mirage (ir_Mirage.cpp translations)
from app.core.ir_protocols.mirage import (
    # Send function
    sendMirage,
    # Decode function
    decodeMirage,
    # Class
    IRMirageAc,
    # Constants
    kMirageHdrMark,
    kMirageBitMark,
    kMirageHdrSpace,
    kMirageOneSpace,
    kMirageZeroSpace,
    kMirageGap,
    kMirageBits,
    kMirageStateLength,
    kMirageDefaultRepeat,
    kMirageHeat,
    kMirageCool,
    kMirageDry,
    kMirageRecycle,
    kMirageFan,
    kMirageMinTemp,
    kMirageMaxTemp,
    kMirageTempOffset,
    kMirageKKG9AC1FanAuto,
    kMirageKKG9AC1FanHigh,
    kMirageKKG9AC1FanMed,
    kMirageKKG9AC1FanLow,
    kMirageKKG29AC1FanAuto,
    kMirageKKG29AC1FanHigh,
    kMirageKKG29AC1FanMed,
    kMirageKKG29AC1FanLow,
    kMirageSwingVAuto,
    kMirageSwingVHighest,
    kMirageSwingVHigh,
    kMirageSwingVMiddle,
    kMirageSwingVLow,
    kMirageSwingVLowest,
    kMirageSwingVOff,
    kMirageSwingVStep,
    kMiragePowerOff,
    kMiragePowerOn,
    kMiragePowerToggle,
    kMirageKKG9AC1,
    kMirageKKG29AC1,
    kMirageIFeelTempDelta,
    kMirageIFeelMinTemp,
    kMirageIFeelMaxTemp,
)

# Import from nikai (ir_Nikai.cpp translations)
from app.core.ir_protocols.nikai import (
    # Send function
    sendNikai,
    # Decode function
    decodeNikai,
    # Constants
    kNikaiTick,
    kNikaiHdrMarkTicks,
    kNikaiHdrMark,
    kNikaiHdrSpaceTicks,
    kNikaiHdrSpace,
    kNikaiBitMarkTicks,
    kNikaiBitMark,
    kNikaiOneSpaceTicks,
    kNikaiOneSpace,
    kNikaiZeroSpaceTicks,
    kNikaiZeroSpace,
    kNikaiMinGapTicks,
    kNikaiMinGap,
    kNikaiBits,
)

# Import from rhoss (ir_Rhoss.cpp translations)
from app.core.ir_protocols.rhoss import (
    # Send function
    sendRhoss,
    # Decode function
    decodeRhoss,
    # Class
    IRRhossAc,
    # Constants
    kRhossHdrMark,
    kRhossHdrSpace,
    kRhossBitMark,
    kRhossOneSpace,
    kRhossZeroSpace,
    kRhossGap,
    kRhossFreq,
    kRhossStateLength,
    kRhossBits,
    kRhossDefaultRepeat,
    kRhossFanAuto,
    kRhossFanMin,
    kRhossFanMed,
    kRhossFanMax,
    kRhossModeHeat,
    kRhossModeCool,
    kRhossModeDry,
    kRhossModeFan,
    kRhossModeAuto,
    kRhossTempMin,
    kRhossTempMax,
    kRhossPowerOn,
    kRhossPowerOff,
    kRhossSwingOn,
    kRhossSwingOff,
    kRhossDefaultFan,
    kRhossDefaultMode,
    kRhossDefaultTemp,
    kRhossDefaultPower,
    kRhossDefaultSwing,
)

# Import from whynter (ir_Whynter.cpp translations)
from app.core.ir_protocols.whynter import (
    # Send function
    sendWhynter,
    # Decode function
    decodeWhynter,
    # Constants
    kWhynterTick,
    kWhynterHdrMarkTicks,
    kWhynterHdrMark,
    kWhynterHdrSpaceTicks,
    kWhynterHdrSpace,
    kWhynterBitMarkTicks,
    kWhynterBitMark,
    kWhynterOneSpaceTicks,
    kWhynterOneSpace,
    kWhynterZeroSpaceTicks,
    kWhynterZeroSpace,
    kWhynterMinCommandLengthTicks,
    kWhynterMinCommandLength,
    kWhynterMinGapTicks,
    kWhynterMinGap,
    kWhynterBits,
)

# Import from bluestar_heavy (ir_BluestarHeavy.cpp translations)
from app.core.ir_protocols.bluestar_heavy import (
    # Send function
    sendBluestarHeavy,
    # Decode function
    decodeBluestarHeavy,
    # Constants
    kBluestarHeavyHdrMark,
    kBluestarHeavyBitMark,
    kBluestarHeavyHdrSpace,
    kBluestarHeavyOneSpace,
    kBluestarHeavyZeroSpace,
    kBluestarHeavyFreq,
    kBluestarHeavyOverhead,
    kBluestarHeavyStateLength,
    kBluestarHeavyBits,
    kDefaultMessageGap,
)

# Import from clima_butler (ir_ClimaButler.cpp translations)
from app.core.ir_protocols.clima_butler import (
    # Send function
    sendClimaButler,
    # Decode function
    decodeClimaButler,
    # Constants
    kClimaButlerBitMark,
    kClimaButlerHdrMark,
    kClimaButlerHdrSpace,
    kClimaButlerOneSpace,
    kClimaButlerZeroSpace,
    kClimaButlerGap,
    kClimaButlerFreq,
    kClimaButlerBits,
)

# Import from doshisha (ir_Doshisha.cpp translations)
from app.core.ir_protocols.doshisha import (
    # Send function
    sendDoshisha,
    # Encode function
    encodeDoshisha,
    # Decode function
    decodeDoshisha,
    # Constants
    kDoshishaHdrMark,
    kDoshishaHdrSpace,
    kDoshishaBitMark,
    kDoshishaOneSpace,
    kDoshishaZeroSpace,
    kDoshishaBits,
    kRcz01SignatureMask,
    kRcz01Signature,
    kRcz01CommandMask,
    kRcz01ChannelMask,
    kRcz01CommandSwitchChannel,
    kRcz01CommandTimer30m,
    kRcz01CommandTimer60m,
    kRcz01CommandLevel1,
    kRcz01CommandLevel2,
    kRcz01CommandLevel3,
    kRcz01CommandLevel4,
    kRcz01CommandLevel5,
    kRcz01CommandLevel6,
    kRcz01CommandOff,
    kRcz01CommandOn,
    kRcz01CommandNightLight,
)

# Import from ecoclim (ir_Ecoclim.cpp translations)
from app.core.ir_protocols.ecoclim import (
    # Send function
    sendEcoclim,
    # Decode function
    decodeEcoclim,
    # Class
    IREcoclimAc,
    # Constants
    kEcoclimHdrMark,
    kEcoclimBitMark,
    kEcoclimHdrSpace,
    kEcoclimOneSpace,
    kEcoclimZeroSpace,
    kEcoclimGap,
    kEcoclimFreq,
    kEcoclimBits,
    kEcoclimAuto,
    kEcoclimCool,
    kEcoclimDry,
    kEcoclimRecycle,
    kEcoclimFan,
    kEcoclimHeat,
    kEcoclimSleep,
    kEcoclimFanMin,
    kEcoclimFanMed,
    kEcoclimFanMax,
    kEcoclimFanAuto,
    kEcoclimTempMin,
    kEcoclimTempMax,
    kEcoclimDefaultState,
)

# Import from technibel (ir_Technibel.cpp translations)
from app.core.ir_protocols.technibel import (
    # Send function
    sendTechnibelAc,
    # Decode function
    decodeTechnibelAc,
    # Class
    IRTechnibelAc,
    # Constants
    kTechnibelAcHdrMark,
    kTechnibelAcBitMark,
    kTechnibelAcHdrSpace,
    kTechnibelAcOneSpace,
    kTechnibelAcZeroSpace,
    kTechnibelAcGap,
    kTechnibelAcFreq,
    kTechnibelAcBits,
    kTechnibelAcCool,
    kTechnibelAcDry,
    kTechnibelAcFan,
    kTechnibelAcHeat,
    kTechnibelAcFanLow,
    kTechnibelAcFanMedium,
    kTechnibelAcFanHigh,
    kTechnibelAcMinTempC,
    kTechnibelAcMaxTempC,
    kTechnibelAcMinTempF,
    kTechnibelAcMaxTempF,
    kTechnibelAcTimerMax,
    kTechnibelAcSwingOn,
    kTechnibelAcSwingOff,
    kTechnibelAcResetState,
)

# Import from teknopoint (ir_Teknopoint.cpp translations)
from app.core.ir_protocols.teknopoint import (
    # Send function
    sendTeknopoint,
    # Decode function
    decodeTeknopoint,
    # Constants
    kTeknopointHdrMark,
    kTeknopointBitMark,
    kTeknopointHdrSpace,
    kTeknopointOneSpace,
    kTeknopointZeroSpace,
    kTeknopointGap,
    kTeknopointFreq,
    kTeknopointStateLength,
    kTeknopointBits,
    kTeknopointTolerance,
)

# Import from transcold (ir_Transcold.cpp translations)
from app.core.ir_protocols.transcold import (
    # Send function
    sendTranscold,
    # Decode function
    decodeTranscold,
    # Class
    IRTranscoldAc,
    # Constants
    kTranscoldHdrMark,
    kTranscoldBitMark,
    kTranscoldHdrSpace,
    kTranscoldOneSpace,
    kTranscoldZeroSpace,
    kTranscoldCool,
    kTranscoldDry,
    kTranscoldAuto,
    kTranscoldHeat,
    kTranscoldFan,
    kTranscoldFanMin,
    kTranscoldFanMed,
    kTranscoldFanMax,
    kTranscoldFanAuto,
    kTranscoldFanAuto0,
    kTranscoldFanZoneFollow,
    kTranscoldFanFixed,
    kTranscoldTempMin,
    kTranscoldTempMax,
    kTranscoldFanTempCode,
    kTranscoldTempSize,
    kTranscoldPrefix,
    kTranscoldUnknown,
    kTranscoldOff,
    kTranscoldSwing,
    kTranscoldSwingH,
    kTranscoldSwingV,
    kTranscoldCmdFan,
    kTranscoldKnownGoodState,
)

# Import from truma (ir_Truma.cpp translations)
from app.core.ir_protocols.truma import (
    # Send function
    sendTruma,
    # Decode function
    decodeTruma,
    # Class
    IRTrumaAc,
    # Constants
    kTrumaLdrMark,
    kTrumaLdrSpace,
    kTrumaHdrMark,
    kTrumaSpace,
    kTrumaOneMark,
    kTrumaZeroMark,
    kTrumaFooterMark,
    kTrumaGap,
    kTrumaDefaultState,
    kTrumaChecksumInit,
    kTrumaAuto,
    kTrumaCool,
    kTrumaFan,
    kTrumaFanQuiet,
    kTrumaFanHigh,
    kTrumaFanMed,
    kTrumaFanLow,
    kTrumaTempOffset,
    kTrumaMinTemp,
    kTrumaMaxTemp,
)

# Import from zepeal (ir_Zepeal.cpp translations)
from app.core.ir_protocols.zepeal import (
    # Send function
    sendZepeal,
    # Decode function
    decodeZepeal,
    # Constants
    kZepealHdrMark,
    kZepealHdrSpace,
    kZepealOneMark,
    kZepealZeroMark,
    kZepealOneSpace,
    kZepealZeroSpace,
    kZepealFooterMark,
    kZepealGap,
    kZepealTolerance,
    kZepealSignature,
    kZepealCommandSpeed,
    kZepealCommandOffOn,
    kZepealCommandRhythm,
    kZepealCommandOffTimer,
    kZepealCommandOnTimer,
)

# Import from ir_recv (IRrecv.cpp translations)
from app.core.ir_protocols.ir_recv import (
    matchMark,
    matchSpace,
    matchAtLeast,
    matchData,
    matchBytes,
    _matchGeneric,
    match_result_t,
    reverseBits,
    decode_results,
    decodeFujitsuAC,
    validate_timings,
    validate_fujitsu_timings,
)

# Import dispatchers (top-level routing)
from app.core.ir_protocols.ir_dispatcher import (
    decode_type_t,
    send,
    decode,
)

__all__ = [
    # Dispatchers (top-level routing from ir_dispatcher.py)
    'decode_type_t',
    'send',
    'decode',
    # Encoding (from ir_send.py)
    'sendData',
    'sendGeneric',
    # Fujitsu-specific (from fujitsu.py)
    'sendFujitsuAC',
    # Gree-specific (from gree.py)
    'sendGree',
    'IRGreeAC',
    'decodeGree',
    'kGreeBits',
    # Daikin-specific (from daikin.py - 10 variants)
    'sendDaikin',
    'sendDaikin2',
    'sendDaikin216',
    'sendDaikin160',
    'sendDaikin176',
    'sendDaikin128',
    'sendDaikin152',
    'sendDaikin64',
    'sendDaikin200',
    'sendDaikin312',
    'decodeDaikin',
    'decodeDaikin2',
    'decodeDaikin216',
    'decodeDaikin160',
    'decodeDaikin176',
    'decodeDaikin128',
    'decodeDaikin152',
    'decodeDaikin64',
    'decodeDaikin200',
    'decodeDaikin312',
    'kDaikinBits',
    'kDaikin2Bits',
    'kDaikin216Bits',
    'kDaikin160Bits',
    'kDaikin176Bits',
    'kDaikin128Bits',
    'kDaikin152Bits',
    'kDaikin64Bits',
    'kDaikin200Bits',
    'kDaikin312Bits',
    # Mitsubishi-specific (from mitsubishi.py - 5 variants)
    'sendMitsubishiAC',
    'sendMitsubishi136',
    'sendMitsubishi112',
    'sendMitsubishiHeavy88',
    'sendMitsubishiHeavy152',
    'decodeMitsubishiAC',
    'decodeMitsubishi136',
    'decodeMitsubishi112',
    'decodeMitsubishiHeavy',
    'validChecksumMitsubishiAC',
    'validChecksumMitsubishi136',
    'validChecksumMitsubishiHeavy152',
    'validChecksumMitsubishiHeavy88',
    'checkZmsSig',
    'checkZjsSig',
    'kMitsubishiAcAuto',
    'kMitsubishiAcCool',
    'kMitsubishiAcDry',
    'kMitsubishiAcHeat',
    'kMitsubishiAcFan',
    'kMitsubishiAcFanAuto',
    'kMitsubishiAcFanMax',
    'kMitsubishiAcFanRealMax',
    'kMitsubishiAcFanSilent',
    'kMitsubishiAcMinTemp',
    'kMitsubishiAcMaxTemp',
    'kMitsubishi136Cool',
    'kMitsubishi136Heat',
    'kMitsubishi136Auto',
    'kMitsubishi136Dry',
    'kMitsubishi136Fan',
    'kMitsubishi136MinTemp',
    'kMitsubishi136MaxTemp',
    'kMitsubishi112Cool',
    'kMitsubishi112Heat',
    'kMitsubishi112Auto',
    'kMitsubishi112Dry',
    'kMitsubishi112MinTemp',
    'kMitsubishi112MaxTemp',
    'kMitsubishiHeavyAuto',
    'kMitsubishiHeavyCool',
    'kMitsubishiHeavyDry',
    'kMitsubishiHeavyFan',
    'kMitsubishiHeavyHeat',
    'kMitsubishiHeavyMinTemp',
    'kMitsubishiHeavyMaxTemp',
    # Hitachi-specific (from hitachi.py - 8 variants)
    'sendHitachiAC',
    'sendHitachiAC1',
    'sendHitachiAc424',
    'sendHitachiAc3',
    'sendHitachiAc344',
    'sendHitachiAc264',
    'sendHitachiAc296',
    'decodeHitachiAC',
    'decodeHitachiAc424',
    'decodeHitachiAc3',
    'decodeHitachiAc296',
    'IRHitachiAc',
    'IRHitachiAc1',
    'IRHitachiAc424',
    'IRHitachiAc3',
    'IRHitachiAc344',
    'IRHitachiAc264',
    'IRHitachiAc296',
    'kHitachiAcBits',
    'kHitachiAcAuto',
    'kHitachiAcHeat',
    'kHitachiAcCool',
    'kHitachiAcDry',
    'kHitachiAcFan',
    'kHitachiAcFanAuto',
    'kHitachiAcFanLow',
    'kHitachiAcFanMed',
    'kHitachiAcFanHigh',
    'kHitachiAcMinTemp',
    'kHitachiAcMaxTemp',
    'kHitachiAc1Bits',
    'kHitachiAc1Dry',
    'kHitachiAc1Fan',
    'kHitachiAc1Cool',
    'kHitachiAc1Heat',
    'kHitachiAc1Auto',
    'kHitachiAc1FanAuto',
    'kHitachiAc1FanHigh',
    'kHitachiAc1FanMed',
    'kHitachiAc1FanLow',
    'kHitachiAc1SleepOff',
    'kHitachiAc1Sleep1',
    'kHitachiAc1Sleep2',
    'kHitachiAc1Sleep3',
    'kHitachiAc1Sleep4',
    'kHitachiAc424Bits',
    'kHitachiAc424Fan',
    'kHitachiAc424Cool',
    'kHitachiAc424Dry',
    'kHitachiAc424Heat',
    'kHitachiAc424FanMin',
    'kHitachiAc424FanLow',
    'kHitachiAc424FanMedium',
    'kHitachiAc424FanHigh',
    'kHitachiAc424FanAuto',
    'kHitachiAc424FanMax',
    'kHitachiAc424MinTemp',
    'kHitachiAc424MaxTemp',
    'kHitachiAc344Bits',
    'kHitachiAc344Fan',
    'kHitachiAc344Cool',
    'kHitachiAc344Dry',
    'kHitachiAc344Heat',
    'kHitachiAc344FanMin',
    'kHitachiAc344FanLow',
    'kHitachiAc344FanMedium',
    'kHitachiAc344FanHigh',
    'kHitachiAc344FanAuto',
    'kHitachiAc344FanMax',
    'kHitachiAc344MinTemp',
    'kHitachiAc344MaxTemp',
    'kHitachiAc344SwingHAuto',
    'kHitachiAc344SwingHRightMax',
    'kHitachiAc344SwingHRight',
    'kHitachiAc344SwingHMiddle',
    'kHitachiAc344SwingHLeft',
    'kHitachiAc344SwingHLeftMax',
    'kHitachiAc264Bits',
    'kHitachiAc264Fan',
    'kHitachiAc264Cool',
    'kHitachiAc264Dry',
    'kHitachiAc264Heat',
    'kHitachiAc264FanMin',
    'kHitachiAc264FanMedium',
    'kHitachiAc264FanHigh',
    'kHitachiAc264FanAuto',
    'kHitachiAc264MinTemp',
    'kHitachiAc264MaxTemp',
    'kHitachiAc296Bits',
    'kHitachiAc296Cool',
    'kHitachiAc296DryCool',
    'kHitachiAc296Dehumidify',
    'kHitachiAc296Heat',
    'kHitachiAc296Auto',
    'kHitachiAc296FanSilent',
    'kHitachiAc296FanLow',
    'kHitachiAc296FanMedium',
    'kHitachiAc296FanHigh',
    'kHitachiAc296FanAuto',
    'kHitachiAc296MinTemp',
    'kHitachiAc296MaxTemp',
    'kHitachiAc3Bits',
    'kHitachiAc3MinBits',
    # Samsung-specific (from samsung.py - 3 variants)
    'sendSAMSUNG',
    'sendSamsung36',
    'sendSamsungAC',
    'decodeSAMSUNG',
    'decodeSamsung36',
    'decodeSamsungAC',
    'encodeSAMSUNG',
    'IRSamsungAc',
    'kSamsungBits',
    'kSamsungMinTemp',
    'kSamsungAcMinTemp',
    'kSamsungAcMaxTemp',
    'kSamsungAcAutoTemp',
    'kSamsungAcAuto',
    'kSamsungAcCool',
    'kSamsungAcDry',
    'kSamsungAcFan',
    'kSamsungAcHeat',
    'kSamsungAcFanAuto',
    'kSamsungAcFanLow',
    'kSamsungAcFanMed',
    'kSamsungAcFanHigh',
    'kSamsungAcFanAuto2',
    'kSamsungAcFanTurbo',
    'kSamsung36Bits',
    'kSamsungAcStateLength',
    'kSamsungAcExtendedStateLength',
    'kSamsungAcSectionLength',
    # LG-specific (from lg.py - 2 variants)
    'sendLG',
    'sendLG2',
    'decodeLG',
    'encodeLG',
    'IRLgAc',
    'kLgBits',
    'kLg32Bits',
    'kLgAcFanLowest',
    'kLgAcFanLow',
    'kLgAcFanMedium',
    'kLgAcFanMax',
    'kLgAcFanAuto',
    'kLgAcFanLowAlt',
    'kLgAcFanHigh',
    'kLgAcMinTemp',
    'kLgAcMaxTemp',
    'kLgAcCool',
    'kLgAcDry',
    'kLgAcFan',
    'kLgAcAuto',
    'kLgAcHeat',
    'kLgAcOffCommand',
    'kLgAcLightToggle',
    'kLgAcSwingVToggle',
    'kLgAcSwingVLowest',
    'kLgAcSwingVLow',
    'kLgAcSwingVMiddle',
    'kLgAcSwingVUpperMiddle',
    'kLgAcSwingVHigh',
    'kLgAcSwingVHighest',
    'kLgAcSwingVSwing',
    'kLgAcSwingVAuto',
    'kLgAcSwingVOff',
    'kLgAcSwingHAuto',
    'kLgAcSwingHOff',
    'LG_GE6711AR2853M',
    'LG_LG6711A20083V',
    'LG_AKB75215403',
    'LG_AKB74955603',
    'LG_AKB73757604',
    # Carrier-specific (from carrier.py - 5 variants)
    'sendCarrierAC',
    'sendCarrierAC40',
    'sendCarrierAC64',
    'sendCarrierAC84',
    'sendCarrierAC128',
    'decodeCarrierAC',
    'decodeCarrierAC40',
    'decodeCarrierAC64',
    'decodeCarrierAC84',
    'decodeCarrierAC128',
    'IRCarrierAc64',
    'kCarrierAcBits',
    'kCarrierAc40Bits',
    'kCarrierAc64Bits',
    'kCarrierAc64Heat',
    'kCarrierAc64Cool',
    'kCarrierAc64Fan',
    'kCarrierAc64FanAuto',
    'kCarrierAc64FanLow',
    'kCarrierAc64FanMedium',
    'kCarrierAc64FanHigh',
    'kCarrierAc64MinTemp',
    'kCarrierAc64MaxTemp',
    'kCarrierAc64TimerMax',
    'kCarrierAc64TimerMin',
    'kCarrierAc84Bits',
    'kCarrierAc128Bits',
    'kCarrierAc128StateLength',
    # Panasonic-specific (from panasonic.py - 3 variants)
    'sendPanasonic64',
    'sendPanasonic',
    'sendPanasonicAC',
    'sendPanasonicAC32',
    'decodePanasonic',
    'decodePanasonicAC',
    'decodePanasonicAC32',
    'encodePanasonic',
    'IRPanasonicAc',
    'IRPanasonicAc32',
    'kPanasonicBits',
    'kPanasonic40Bits',
    'kPanasonicFreq',
    'kPanasonicAcStateLength',
    'kPanasonicAcBits',
    'kPanasonicAcShortBits',
    'kPanasonicAcAuto',
    'kPanasonicAcDry',
    'kPanasonicAcCool',
    'kPanasonicAcHeat',
    'kPanasonicAcFan',
    'kPanasonicAcFanMin',
    'kPanasonicAcFanLow',
    'kPanasonicAcFanMed',
    'kPanasonicAcFanHigh',
    'kPanasonicAcFanMax',
    'kPanasonicAcFanAuto',
    'kPanasonicAcMinTemp',
    'kPanasonicAcMaxTemp',
    'kPanasonicAcSwingVAuto',
    'kPanasonicAcSwingVHighest',
    'kPanasonicAcSwingVHigh',
    'kPanasonicAcSwingVMiddle',
    'kPanasonicAcSwingVLow',
    'kPanasonicAcSwingVLowest',
    'kPanasonicAcSwingHAuto',
    'kPanasonicAcSwingHMiddle',
    'kPanasonicAcSwingHFullLeft',
    'kPanasonicAcSwingHLeft',
    'kPanasonicAcSwingHRight',
    'kPanasonicAcSwingHFullRight',
    'kPanasonicAc32Bits',
    'kPanasonicAc32Fan',
    'kPanasonicAc32Cool',
    'kPanasonicAc32Dry',
    'kPanasonicAc32Heat',
    'kPanasonicAc32Auto',
    'kPanasonicAc32FanMin',
    'kPanasonicAc32FanLow',
    'kPanasonicAc32FanMed',
    'kPanasonicAc32FanHigh',
    'kPanasonicAc32FanMax',
    'kPanasonicAc32FanAuto',
    'kPanasonicAc32SwingVAuto',
    'kPanasonicUnknown',
    'kPanasonicDke',
    'kPanasonicJke',
    'kPanasonicNke',
    'kPanasonicLke',
    'kPanasonicCkp',
    'kPanasonicRkr',
    # Haier-specific (from haier.py - 4 variants)
    'sendHaierAC',
    'sendHaierACYRW02',
    'sendHaierAC176',
    'sendHaierAC160',
    'decodeHaierAC',
    'decodeHaierACYRW02',
    'decodeHaierAC176',
    'decodeHaierAC160',
    'IRHaierAC',
    'IRHaierAC176',
    'IRHaierACYRW02',
    'IRHaierAC160',
    'kHaierACBits',
    'kHaierACStateLength',
    'kHaierAcPrefix',
    'kHaierAcMinTemp',
    'kHaierAcDefTemp',
    'kHaierAcMaxTemp',
    'kHaierAcCmdOff',
    'kHaierAcCmdOn',
    'kHaierAcCmdMode',
    'kHaierAcCmdFan',
    'kHaierAcCmdTempUp',
    'kHaierAcCmdTempDown',
    'kHaierAcCmdSleep',
    'kHaierAcCmdTimerSet',
    'kHaierAcCmdTimerCancel',
    'kHaierAcCmdHealth',
    'kHaierAcCmdSwing',
    'kHaierAcSwingVOff',
    'kHaierAcSwingVUp',
    'kHaierAcSwingVDown',
    'kHaierAcSwingVChg',
    'kHaierAcAuto',
    'kHaierAcCool',
    'kHaierAcDry',
    'kHaierAcHeat',
    'kHaierAcFan',
    'kHaierAcFanAuto',
    'kHaierAcFanLow',
    'kHaierAcFanMed',
    'kHaierAcFanHigh',
    'kHaierAcMaxTime',
    'kHaierACYRW02Bits',
    'kHaierACYRW02StateLength',
    'kHaierAcYrw02MinTempC',
    'kHaierAcYrw02MaxTempC',
    'kHaierAcYrw02MinTempF',
    'kHaierAcYrw02MaxTempF',
    'kHaierAcYrw02DefTempC',
    'kHaierAcYrw02ModelA',
    'kHaierAcYrw02ModelB',
    'kHaierAcYrw02SwingVOff',
    'kHaierAcYrw02SwingVTop',
    'kHaierAcYrw02SwingVMiddle',
    'kHaierAcYrw02SwingVBottom',
    'kHaierAcYrw02SwingVDown',
    'kHaierAcYrw02SwingVAuto',
    'kHaierAcYrw02SwingHMiddle',
    'kHaierAcYrw02SwingHLeftMax',
    'kHaierAcYrw02SwingHLeft',
    'kHaierAcYrw02SwingHRight',
    'kHaierAcYrw02SwingHRightMax',
    'kHaierAcYrw02SwingHAuto',
    'kHaierAcYrw02FanHigh',
    'kHaierAcYrw02FanMed',
    'kHaierAcYrw02FanLow',
    'kHaierAcYrw02FanAuto',
    'kHaierAcYrw02Auto',
    'kHaierAcYrw02Cool',
    'kHaierAcYrw02Dry',
    'kHaierAcYrw02Heat',
    'kHaierAcYrw02Fan',
    'kHaierAcYrw02ButtonTempUp',
    'kHaierAcYrw02ButtonTempDown',
    'kHaierAcYrw02ButtonSwingV',
    'kHaierAcYrw02ButtonSwingH',
    'kHaierAcYrw02ButtonFan',
    'kHaierAcYrw02ButtonPower',
    'kHaierAcYrw02ButtonMode',
    'kHaierAcYrw02ButtonHealth',
    'kHaierAcYrw02ButtonTurbo',
    'kHaierAcYrw02ButtonSleep',
    'kHaierAcYrw02ButtonTimer',
    'kHaierAcYrw02ButtonLock',
    'kHaierAcYrw02ButtonCFAB',
    'kHaierAcYrw02NoTimers',
    'kHaierAcYrw02OffTimer',
    'kHaierAcYrw02OnTimer',
    'kHaierAcYrw02OnThenOffTimer',
    'kHaierAcYrw02OffThenOnTimer',
    'kHaierAC176Bits',
    'kHaierAC176StateLength',
    'kHaierAc176Prefix',
    'HAIER_AC176_REMOTE_MODEL_A',
    'HAIER_AC176_REMOTE_MODEL_B',
    'kHaierAC160Bits',
    'kHaierAC160StateLength',
    'kHaierAc160Prefix',
    'kHaierAc160SwingVOff',
    'kHaierAc160SwingVTop',
    'kHaierAc160SwingVHighest',
    'kHaierAc160SwingVHigh',
    'kHaierAc160SwingVMiddle',
    'kHaierAc160SwingVLow',
    'kHaierAc160SwingVLowest',
    'kHaierAc160SwingVAuto',
    'kHaierAc160ButtonLight',
    'kHaierAc160ButtonAuxHeating',
    'kHaierAc160ButtonClean',
    # Sharp-specific (from sharp.py - 3 variants)
    'sendSharpRaw',
    'sendSharp',
    'sendSharpAc',
    'decodeSharp',
    'decodeSharpAc',
    'encodeSharp',
    'calcChecksumSharpAc',
    'validChecksumSharpAc',
    'IRSharpAc',
    'kSharpBits',
    'kSharpAddressBits',
    'kSharpCommandBits',
    'kSharpBitMark',
    'kSharpOneSpace',
    'kSharpZeroSpace',
    'kSharpGap',
    'kSharpAcStateLength',
    'kSharpAcBits',
    'kSharpAcHdrMark',
    'kSharpAcHdrSpace',
    'kSharpAcBitMark',
    'kSharpAcOneSpace',
    'kSharpAcZeroSpace',
    'kSharpAcGap',
    'kSharpAcMinTemp',
    'kSharpAcMaxTemp',
    'kSharpAcAuto',
    'kSharpAcFan',
    'kSharpAcDry',
    'kSharpAcCool',
    'kSharpAcHeat',
    'kSharpAcFanAuto',
    'kSharpAcFanMin',
    'kSharpAcFanMed',
    'kSharpAcFanA705Low',
    'kSharpAcFanHigh',
    'kSharpAcFanA705Med',
    'kSharpAcFanMax',
    'kSharpAcSwingVIgnore',
    'kSharpAcSwingVHigh',
    'kSharpAcSwingVOff',
    'kSharpAcSwingVMid',
    'kSharpAcSwingVLow',
    'kSharpAcSwingVCoanda',
    'kSharpAcSwingVToggle',
    'kSharpAcPowerOn',
    'kSharpAcPowerOff',
    'kSharpAcSpecialPower',
    'kSharpAcSpecialTurbo',
    'kSharpAcSpecialFan',
    'kSharpAcSpecialSwing',
    'SHARP_A907',
    'SHARP_A705',
    'SHARP_A903',
    # Whirlpool-specific (from whirlpool.py)
    'sendWhirlpoolAC',
    'decodeWhirlpoolAC',
    'validChecksumWhirlpoolAc',
    'IRWhirlpoolAc',
    'kWhirlpoolAcStateLength',
    'kWhirlpoolAcBits',
    'kWhirlpoolAcHdrMark',
    'kWhirlpoolAcHdrSpace',
    'kWhirlpoolAcBitMark',
    'kWhirlpoolAcOneSpace',
    'kWhirlpoolAcZeroSpace',
    'kWhirlpoolAcGap',
    'kWhirlpoolAcMinTemp',
    'kWhirlpoolAcMaxTemp',
    'kWhirlpoolAcAutoTemp',
    'kWhirlpoolAcHeat',
    'kWhirlpoolAcAuto',
    'kWhirlpoolAcCool',
    'kWhirlpoolAcDry',
    'kWhirlpoolAcFan',
    'kWhirlpoolAcFanAuto',
    'kWhirlpoolAcFanHigh',
    'kWhirlpoolAcFanMedium',
    'kWhirlpoolAcFanLow',
    'kWhirlpoolAcCommandLight',
    'kWhirlpoolAcCommandPower',
    'kWhirlpoolAcCommandTemp',
    'kWhirlpoolAcCommandSleep',
    'kWhirlpoolAcCommandSuper',
    'kWhirlpoolAcCommandOnTimer',
    'kWhirlpoolAcCommandMode',
    'kWhirlpoolAcCommandSwing',
    'kWhirlpoolAcCommandIFeel',
    'kWhirlpoolAcCommandFanSpeed',
    'kWhirlpoolAcCommand6thSense',
    'kWhirlpoolAcCommandOffTimer',
    'WHIRLPOOL_DG11J13A',
    'WHIRLPOOL_DG11J191',
    # Toshiba-specific (from toshiba.py)
    'sendToshibaAC',
    'decodeToshibaAC',
    'IRToshibaAC',
    'kToshibaACStateLengthShort',
    'kToshibaACStateLength',
    'kToshibaACStateLengthLong',
    'kToshibaAcSwingStep',
    'kToshibaAcSwingOn',
    'kToshibaAcSwingOff',
    'kToshibaAcSwingToggle',
    'kToshibaAcMinTemp',
    'kToshibaAcMaxTemp',
    'kToshibaAcAuto',
    'kToshibaAcCool',
    'kToshibaAcDry',
    'kToshibaAcHeat',
    'kToshibaAcFan',
    'kToshibaAcOff',
    'kToshibaAcFanAuto',
    'kToshibaAcFanMin',
    'kToshibaAcFanMed',
    'kToshibaAcFanMax',
    'kToshibaAcTurboOn',
    'kToshibaAcEconoOn',
    'kToshibaAcRemoteA',
    'kToshibaAcRemoteB',
    # Midea-specific (from midea.py - 2 variants)
    'sendMidea',
    'sendMidea24',
    'decodeMidea',
    'decodeMidea24',
    'IRMideaAC',
    'kMideaBits',
    'kMideaACMinTempF',
    'kMideaACMaxTempF',
    'kMideaACMinTempC',
    'kMideaACMaxTempC',
    'kMideaACMinSensorTempC',
    'kMideaACMaxSensorTempC',
    'kMideaACMinSensorTempF',
    'kMideaACMaxSensorTempF',
    'kMideaACSensorTempOnTimerOff',
    'kMideaACTimerOff',
    'kMideaACCool',
    'kMideaACDry',
    'kMideaACAuto',
    'kMideaACHeat',
    'kMideaACFan',
    'kMideaACFanAuto',
    'kMideaACFanLow',
    'kMideaACFanMed',
    'kMideaACFanHigh',
    'kMideaACToggleSwingV',
    'kMideaACToggleEcono',
    'kMideaACToggleLight',
    'kMideaACToggleTurbo',
    'kMideaACToggleSelfClean',
    'kMideaACToggle8CHeat',
    'kMideaACQuietOn',
    'kMideaACQuietOff',
    'kMideaACTypeCommand',
    'kMideaACTypeSpecial',
    'kMideaACTypeFollow',
    'kMidea24Bits',
    # Coolix-specific (from coolix.py - 2 variants)
    'sendCOOLIX',
    'sendCoolix48',
    'decodeCOOLIX',
    'decodeCoolix48',
    'IRCoolixAC',
    'kCoolixBits',
    'kCoolixCool',
    'kCoolixDry',
    'kCoolixAuto',
    'kCoolixHeat',
    'kCoolixFan',
    'kCoolixFanMin',
    'kCoolixFanMed',
    'kCoolixFanMax',
    'kCoolixFanAuto',
    'kCoolixFanAuto0',
    'kCoolixFanZoneFollow',
    'kCoolixFanFixed',
    'kCoolixTempMin',
    'kCoolixTempMax',
    'kCoolixSensorTempMax',
    'kCoolixSensorTempIgnoreCode',
    'kCoolixOff',
    'kCoolixSwing',
    'kCoolixSwingH',
    'kCoolixSwingV',
    'kCoolixSleep',
    'kCoolixTurbo',
    'kCoolixLed',
    'kCoolixClean',
    'kCoolixCmdFan',
    'kCoolixDefaultState',
    'kCoolixDefaultRepeat',
    'kCoolix48Bits',
    # Kelvinator-specific (from kelvinator.py)
    'sendKelvinator',
    'decodeKelvinator',
    'calcBlockChecksum',
    'IRKelvinatorAC',
    'kKelvinatorStateLength',
    'kKelvinatorAuto',
    'kKelvinatorCool',
    'kKelvinatorDry',
    'kKelvinatorFan',
    'kKelvinatorHeat',
    'kKelvinatorBasicFanMax',
    'kKelvinatorFanAuto',
    'kKelvinatorFanMin',
    'kKelvinatorFanMax',
    'kKelvinatorMinTemp',
    'kKelvinatorMaxTemp',
    'kKelvinatorAutoTemp',
    'kKelvinatorSwingVOff',
    'kKelvinatorSwingVAuto',
    'kKelvinatorSwingVHighest',
    'kKelvinatorSwingVUpperMiddle',
    'kKelvinatorSwingVMiddle',
    'kKelvinatorSwingVLowerMiddle',
    'kKelvinatorSwingVLowest',
    'kKelvinatorSwingVLowAuto',
    'kKelvinatorSwingVMiddleAuto',
    'kKelvinatorSwingVHighAuto',
    # Electra-specific (from electra.py)
    'sendElectraAC',
    'decodeElectraAC',
    'IRElectraAc',
    'kElectraAcStateLength',
    'kElectraAcBits',
    'kElectraAcMinTemp',
    'kElectraAcMaxTemp',
    'kElectraAcTempDelta',
    'kElectraAcSwingOn',
    'kElectraAcSwingOff',
    'kElectraAcFanAuto',
    'kElectraAcFanLow',
    'kElectraAcFanMed',
    'kElectraAcFanHigh',
    'kElectraAcAuto',
    'kElectraAcCool',
    'kElectraAcDry',
    'kElectraAcHeat',
    'kElectraAcFan',
    'kElectraAcLightToggleOn',
    'kElectraAcLightToggleMask',
    'kElectraAcLightToggleOff',
    'kElectraAcSensorTempDelta',
    'kElectraAcSensorMinTemp',
    'kElectraAcSensorMaxTemp',
    # Teco-specific (from teco.py)
    'sendTeco',
    'decodeTeco',
    'IRTecoAc',
    'kTecoBits',
    'kTecoAuto',
    'kTecoCool',
    'kTecoDry',
    'kTecoFan',
    'kTecoHeat',
    'kTecoFanAuto',
    'kTecoFanLow',
    'kTecoFanMed',
    'kTecoFanHigh',
    'kTecoMinTemp',
    'kTecoMaxTemp',
    'kTecoReset',
    # Neoclima-specific (from neoclima.py)
    'sendNeoclima',
    'decodeNeoclima',
    'calcChecksumNeoclima',
    'validChecksumNeoclima',
    'IRNeoclimaAc',
    'kNeoclimaBits',
    'kNeoclimaStateLength',
    'kNeoclimaButtonPower',
    'kNeoclimaButtonMode',
    'kNeoclimaButtonTempUp',
    'kNeoclimaButtonTempDown',
    'kNeoclimaButtonSwing',
    'kNeoclimaButtonFanSpeed',
    'kNeoclimaButtonAirFlow',
    'kNeoclimaButtonHold',
    'kNeoclimaButtonSleep',
    'kNeoclimaButtonTurbo',
    'kNeoclimaButtonLight',
    'kNeoclimaButtonEcono',
    'kNeoclimaButtonEye',
    'kNeoclimaButtonFollow',
    'kNeoclimaButtonIon',
    'kNeoclimaButtonFresh',
    'kNeoclimaButton8CHeat',
    'kNeoclimaButtonTempUnit',
    'kNeoclimaSwingVOn',
    'kNeoclimaSwingVOff',
    'kNeoclimaFanAuto',
    'kNeoclimaFanHigh',
    'kNeoclimaFanMed',
    'kNeoclimaFanLow',
    'kNeoclimaFollowMe',
    'kNeoclimaMinTempC',
    'kNeoclimaMaxTempC',
    'kNeoclimaMinTempF',
    'kNeoclimaMaxTempF',
    'kNeoclimaAuto',
    'kNeoclimaCool',
    'kNeoclimaDry',
    'kNeoclimaFan',
    'kNeoclimaHeat',
    # Argo-specific (from argo.py - WREM-2 variant)
    'sendArgo',
    'decodeArgo',
    'calcChecksumArgo',
    'validChecksumArgo',
    'getChecksumArgo',
    'IRArgoAC',
    'kArgoBits',
    'kArgoStateLength',
    'kArgoShortStateLength',
    'kArgoPreamble1',
    'kArgoPreamble2',
    'kArgoPost',
    'kArgoTempDelta',
    'kArgoMaxRoomTemp',
    'kArgoMinTemp',
    'kArgoMaxTemp',
    'kArgoCool',
    'kArgoDry',
    'kArgoAuto',
    'kArgoOff',
    'kArgoHeat',
    'kArgoHeatAuto',
    'kArgoFanAuto',
    'kArgoFan1',
    'kArgoFan2',
    'kArgoFan3',
    'kArgoFlapAuto',
    'kArgoFlap1',
    'kArgoFlap2',
    'kArgoFlap3',
    'kArgoFlap4',
    'kArgoFlap5',
    'kArgoFlap6',
    'kArgoFlapFull',
    # Trotec-specific (from trotec.py - both Trotec and Trotec3550)
    'sendTrotec',
    'sendTrotec3550',
    'decodeTrotec',
    'decodeTrotec3550',
    'calcChecksumTrotec',
    'validChecksumTrotec',
    'calcChecksumTrotec3550',
    'validChecksumTrotec3550',
    'IRTrotecESP',
    'IRTrotec3550',
    'kTrotecBits',
    'kTrotecStateLength',
    'kTrotecIntro1',
    'kTrotecIntro2',
    'kTrotecAuto',
    'kTrotecCool',
    'kTrotecDry',
    'kTrotecFan',
    'kTrotecFanLow',
    'kTrotecFanMed',
    'kTrotecFanHigh',
    'kTrotecMinTemp',
    'kTrotecDefTemp',
    'kTrotecMaxTemp',
    'kTrotecMaxTimer',
    'kTrotec3550MinTempC',
    'kTrotec3550MaxTempC',
    'kTrotec3550MinTempF',
    'kTrotec3550MaxTempF',
    'kTrotec3550TimerMax',
    # Decoding (from ir_recv.py)
    'matchMark',
    'matchSpace',
    'matchAtLeast',
    'matchData',
    'matchBytes',
    '_matchGeneric',
    'match_result_t',
    'reverseBits',
    'decode_results',
    'decodeFujitsuAC',
    'validate_timings',
    'validate_fujitsu_timings',
]
